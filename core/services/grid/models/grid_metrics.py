"""
ÁΩëÊ†ºÊåáÊ†áÊ®°Âûã

ÂÆö‰πâÁΩëÊ†ºÁ≥ªÁªüÁöÑÊÄßËÉΩÊåáÊ†áÂíåÁªüËÆ°Êï∞ÊçÆ
"""

from dataclasses import dataclass, field
from typing import List, Dict
from decimal import Decimal
from datetime import datetime, timedelta


@dataclass
class GridStatistics:
    """
    ÁΩëÊ†ºÁªüËÆ°Êï∞ÊçÆ

    Áî®‰∫éÁªàÁ´ØÁïåÈù¢ÊòæÁ§∫
    """

    # Âü∫Êú¨‰ø°ÊÅØ
    grid_count: int                         # ÊÄªÁΩëÊ†ºÊï∞
    grid_interval: Decimal                  # ÁΩëÊ†ºÈó¥Èöî
    price_range: tuple                      # ‰ª∑Ê†ºÂå∫Èó¥ (lower, upper)

    # ÂΩìÂâçÁä∂ÊÄÅ
    current_price: Decimal                  # ÂΩìÂâç‰ª∑Ê†º
    current_grid_id: int                    # ÂΩìÂâçÁΩëÊ†º‰ΩçÁΩÆ
    current_position: Decimal               # ÂΩìÂâçÊåÅ‰ªì
    average_cost: Decimal                   # Âπ≥ÂùáÊàêÊú¨

    # ËÆ¢ÂçïÁªüËÆ°
    pending_buy_orders: int                 # ÊåÇÂçï‰∏≠ÁöÑ‰π∞ÂçïÊï∞
    pending_sell_orders: int                # ÊåÇÂçï‰∏≠ÁöÑÂçñÂçïÊï∞
    total_pending_orders: int               # ÊÄªÊåÇÂçïÊï∞

    # Êàê‰∫§ÁªüËÆ°
    filled_buy_count: int                   # ‰π∞ÂçïÊàê‰∫§Ê¨°Êï∞
    filled_sell_count: int                  # ÂçñÂçïÊàê‰∫§Ê¨°Êï∞
    completed_cycles: int                   # ÂÆåÊàêÂæ™ÁéØÊ¨°Êï∞

    # Áõà‰∫èÁªüËÆ°
    realized_profit: Decimal                # Â∑≤ÂÆûÁé∞Áõà‰∫è
    unrealized_profit: Decimal              # Êú™ÂÆûÁé∞Áõà‰∫è
    total_profit: Decimal                   # ÊÄªÁõà‰∫è
    total_fees: Decimal                     # ÊÄªÊâãÁª≠Ë¥π
    net_profit: Decimal                     # ÂáÄÂà©Ê∂¶
    profit_rate: Decimal                    # Êî∂ÁõäÁéá

    @property
    def unrealized_pnl(self) -> Decimal:
        """Êú™ÂÆûÁé∞Áõà‰∫èÁöÑÂà´ÂêçÔºàÁî®‰∫é‰∏éPositionData‰øùÊåÅ‰∏ÄËá¥Ôºâ"""
        return self.unrealized_profit

    @property
    def realized_pnl(self) -> Decimal:
        """Â∑≤ÂÆûÁé∞Áõà‰∫èÁöÑÂà´ÂêçÔºàÁî®‰∫é‰∏éPositionData‰øùÊåÅ‰∏ÄËá¥Ôºâ"""
        return self.realized_profit

    # ÁΩëÊ†ºÂà©Áî®Áéá
    grid_utilization: float                 # ÁΩëÊ†ºÂà©Áî®ÁéáÔºàÁôæÂàÜÊØîÔºâ

    # ËµÑÈáë‰ø°ÊÅØÔºàBackpackÁªü‰∏ÄË¥¶Êà∑Ôºâ
    spot_balance: Decimal                   # Áé∞Ë¥ß‰ΩôÈ¢ùÔºàÊú™Áî®‰Ωú‰øùËØÅÈáëÁöÑÔºâ
    collateral_balance: Decimal             # ÊäµÊäºÂìÅËµÑÈáëÔºàÁî®‰Ωú‰øùËØÅÈáëÁöÑÔºâ
    order_locked_balance: Decimal           # ËÆ¢ÂçïÂÜªÁªìËµÑÈáë
    total_balance: Decimal                  # ÊÄªËµÑÈáë
    capital_utilization: float              # ËµÑÈáëÂà©Áî®Áéá

    # Êó∂Èó¥‰ø°ÊÅØ
    running_time: timedelta                 # ËøêË°åÊó∂Èïø
    last_trade_time: datetime               # ÊúÄÂêéÊàê‰∫§Êó∂Èó¥

    # ÁõëÊéßÊñπÂºè
    monitoring_mode: str = "WebSocket"      # ËÆ¢ÂçïÁõëÊéßÊñπÂºèÔºöWebSocket Êàñ RESTËΩÆËØ¢
    # ÊåÅ‰ªìÊï∞ÊçÆÊù•Ê∫êÔºöWebSocketÁºìÂ≠ò / PositionTracker / REST API
    position_data_source: str = "PositionTracker"

    # Êú¨Èáë‰øùÊä§Ê®°ÂºèÁä∂ÊÄÅ
    capital_protection_enabled: bool = False  # ÊòØÂê¶ÂêØÁî®Êú¨Èáë‰øùÊä§
    capital_protection_active: bool = False   # Êú¨Èáë‰øùÊä§ÊòØÂê¶Â∑≤ÊøÄÊ¥ª
    initial_capital: Decimal = Decimal('0')   # ÂàùÂßãÊú¨Èáë
    capital_profit_loss: Decimal = Decimal('0')  # Êú¨ÈáëÁõà‰∫è

    # ‰ª∑Ê†ºËÑ±Á¶ªÁõëÊéßÁä∂ÊÄÅÔºà‰ª∑Ê†ºÁßªÂä®ÁΩëÊ†º‰∏ìÁî®Ôºâ
    price_escape_active: bool = False          # ÊòØÂê¶Ê≠£Âú®ËÑ±Á¶ª
    price_escape_direction: str = ""           # ËÑ±Á¶ªÊñπÂêëÔºöup/down
    price_escape_duration: int = 0             # Â∑≤ËÑ±Á¶ªÊó∂ÈïøÔºàÁßíÔºâ
    price_escape_timeout: int = 0              # ËÑ±Á¶ªË∂ÖÊó∂ÈòàÂÄºÔºàÁßíÔºâ
    price_escape_remaining: int = 0            # Ââ©‰ΩôÊó∂Èó¥ÔºàÁßíÔºâ

    # Ê≠¢ÁõàÊ®°ÂºèÁä∂ÊÄÅ
    take_profit_enabled: bool = False          # ÊòØÂê¶ÂêØÁî®Ê≠¢ÁõàÊ®°Âºè
    take_profit_active: bool = False           # Ê≠¢ÁõàÊ®°ÂºèÊòØÂê¶Â∑≤ÊøÄÊ¥ª
    take_profit_initial_capital: Decimal = Decimal('0')  # Ê≠¢ÁõàÂàùÂßãÊú¨Èáë
    take_profit_current_profit: Decimal = Decimal('0')   # ÂΩìÂâçÁõàÂà©ÈáëÈ¢ù
    take_profit_profit_rate: Decimal = Decimal('0')      # ÂΩìÂâçÁõàÂà©ÁéáÔºàÁôæÂàÜÊØîÔºâ
    take_profit_threshold: Decimal = Decimal('0')        # Ê≠¢ÁõàÈòàÂÄºÔºàÁôæÂàÜÊØîÔºâ

    # ‰ª∑Ê†ºÈîÅÂÆöÊ®°ÂºèÁä∂ÊÄÅ
    price_lock_enabled: bool = False           # ÊòØÂê¶ÂêØÁî®‰ª∑Ê†ºÈîÅÂÆöÊ®°Âºè
    price_lock_active: bool = False            # ‰ª∑Ê†ºÈîÅÂÆöÊòØÂê¶Â∑≤ÊøÄÊ¥ª
    price_lock_threshold: Decimal = Decimal('0')  # ‰ª∑Ê†ºÈîÅÂÆöÈòàÂÄº

    # üÜï Ëß¶ÂèëÊ¨°Êï∞ÁªüËÆ°Ôºà‰ªÖÊ†áËÆ∞Ê¨°Êï∞ÔºåÊó†ÂÆûË¥®ÊÄßÂäüËÉΩÔºâ
    scalping_trigger_count: int = 0            # Ââ•Â§¥ÁöÆÊ®°ÂºèËß¶ÂèëÊ¨°Êï∞
    price_escape_trigger_count: int = 0        # ‰ª∑Ê†ºÊúùÊúâÂà©ÊñπÂêëËÑ±Á¶ªËß¶ÂèëÊ¨°Êï∞
    take_profit_trigger_count: int = 0         # Ê≠¢ÁõàÊ®°ÂºèËß¶ÂèëÊ¨°Êï∞
    capital_protection_trigger_count: int = 0  # Êú¨Èáë‰øùÊä§Ê®°ÂºèËß¶ÂèëÊ¨°Êï∞

    def to_display_dict(self) -> Dict:
        """ËΩ¨Êç¢‰∏∫ÊòæÁ§∫Â≠óÂÖ∏"""
        return {
            'grid_count': self.grid_count,
            'grid_interval': float(self.grid_interval),
            'price_range': {
                'lower': float(self.price_range[0]),
                'upper': float(self.price_range[1])
            },
            'current_price': float(self.current_price),
            'current_grid_id': self.current_grid_id,
            'current_position': float(self.current_position),
            'average_cost': float(self.average_cost),
            'pending_orders': {
                'buy': self.pending_buy_orders,
                'sell': self.pending_sell_orders,
                'total': self.total_pending_orders
            },
            'filled_orders': {
                'buy': self.filled_buy_count,
                'sell': self.filled_sell_count,
                'cycles': self.completed_cycles
            },
            'profit': {
                'realized': float(self.realized_profit),
                'unrealized': float(self.unrealized_profit),
                'total': float(self.total_profit),
                'fees': float(self.total_fees),
                'net': float(self.net_profit),
                'rate': float(self.profit_rate)
            },
            'grid_utilization': self.grid_utilization,
            'balance': {
                'spot': float(self.spot_balance),
                'collateral': float(self.collateral_balance),
                'order_locked': float(self.order_locked_balance),
                'total': float(self.total_balance),
                'utilization': self.capital_utilization
            },
            'time': {
                'running_time': str(self.running_time),
                'last_trade': self.last_trade_time.isoformat()
            }
        }


@dataclass
class GridMetrics:
    """
    ÁΩëÊ†ºÊÄßËÉΩÊåáÊ†á

    Áî®‰∫éÂàÜÊûêÁΩëÊ†ºÁ≥ªÁªüÁöÑËøêË°åÊïàÊûú
    """

    # Êî∂ÁõäÊåáÊ†á
    total_profit: Decimal = Decimal('0')       # ÊÄªÂà©Ê∂¶
    profit_rate: Decimal = Decimal('0')        # Êî∂ÁõäÁéá
    daily_profit: Decimal = Decimal('0')       # Êó•ÂùáÊî∂Áõä

    # ‰∫§ÊòìÊåáÊ†á
    total_trades: int = 0                      # ÊÄª‰∫§ÊòìÊ¨°Êï∞
    win_trades: int = 0                        # ÁõàÂà©‰∫§ÊòìÊ¨°Êï∞
    loss_trades: int = 0                       # ‰∫èÊçü‰∫§ÊòìÊ¨°Êï∞
    win_rate: float = 0.0                      # ËÉúÁéá

    # ÊïàÁéáÊåáÊ†á
    avg_profit_per_trade: Decimal = Decimal('0')  # Âπ≥ÂùáÊØèÁ¨îÊî∂Áõä
    avg_holding_time: timedelta = timedelta()     # Âπ≥ÂùáÊåÅ‰ªìÊó∂Èó¥
    grid_efficiency: float = 0.0                  # ÁΩëÊ†ºÊïàÁéá

    # È£éÈô©ÊåáÊ†á
    max_drawdown: Decimal = Decimal('0')       # ÊúÄÂ§ßÂõûÊí§
    max_position: Decimal = Decimal('0')       # ÊúÄÂ§ßÊåÅ‰ªì
    avg_position: Decimal = Decimal('0')       # Âπ≥ÂùáÊåÅ‰ªì

    # ÊàêÊú¨ÊåáÊ†á
    total_fees: Decimal = Decimal('0')         # ÊÄªÊâãÁª≠Ë¥π
    fee_rate: Decimal = Decimal('0')           # ÊâãÁª≠Ë¥πÁéá

    # Êó∂Èó¥ÊåáÊ†á
    running_days: int = 0                      # ËøêË°åÂ§©Êï∞
    uptime_percentage: float = 100.0           # ËøêË°åÊó∂Èó¥ÁôæÂàÜÊØî

    def calculate_metrics(self,
                          trades: List,
                          start_time: datetime,
                          end_time: datetime,
                          initial_balance: Decimal):
        """
        ËÆ°ÁÆóÊâÄÊúâÊåáÊ†á

        Args:
            trades: ‰∫§ÊòìËÆ∞ÂΩïÂàóË°®
            start_time: ÂºÄÂßãÊó∂Èó¥
            end_time: ÁªìÊùüÊó∂Èó¥
            initial_balance: ÂàùÂßãËµÑÈáë
        """
        if not trades:
            return

        # ËÆ°ÁÆó‰∫§ÊòìÊåáÊ†á
        self.total_trades = len(trades)

        # ËÆ°ÁÆóËÉúÁéá
        for trade in trades:
            if trade.get('profit', 0) > 0:
                self.win_trades += 1
            elif trade.get('profit', 0) < 0:
                self.loss_trades += 1

        if self.total_trades > 0:
            self.win_rate = (self.win_trades / self.total_trades) * 100

        # ËÆ°ÁÆóÊî∂ÁõäÁéá
        if initial_balance > 0:
            self.profit_rate = (self.total_profit / initial_balance) * 100

        # ËÆ°ÁÆóËøêË°åÂ§©Êï∞
        running_time = end_time - start_time
        self.running_days = running_time.days

        # ËÆ°ÁÆóÊó•ÂùáÊî∂Áõä
        if self.running_days > 0:
            self.daily_profit = self.total_profit / \
                Decimal(str(self.running_days))

    def to_dict(self) -> Dict:
        """ËΩ¨Êç¢‰∏∫Â≠óÂÖ∏"""
        return {
            'profit': {
                'total': float(self.total_profit),
                'rate': float(self.profit_rate),
                'daily': float(self.daily_profit)
            },
            'trades': {
                'total': self.total_trades,
                'win': self.win_trades,
                'loss': self.loss_trades,
                'win_rate': self.win_rate
            },
            'efficiency': {
                'avg_profit_per_trade': float(self.avg_profit_per_trade),
                'grid_efficiency': self.grid_efficiency
            },
            'risk': {
                'max_drawdown': float(self.max_drawdown),
                'max_position': float(self.max_position),
                'avg_position': float(self.avg_position)
            },
            'cost': {
                'total_fees': float(self.total_fees),
                'fee_rate': float(self.fee_rate)
            },
            'time': {
                'running_days': self.running_days,
                'uptime_percentage': self.uptime_percentage
            }
        }
